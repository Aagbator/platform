require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe CourseContentHistoriesController, type: :controller do
  render_views
  let(:user) { create :admin_user }

  let(:course_content) { create(:course_content) }
  let(:course_content_history) { create(:course_content_history, attributes) }
  let(:attributes) { valid_attributes }
  let(:valid_attributes) { attributes_for(:course_content_history).merge(course_content_id: course_content.id) }

  let(:valid_session) { {} }
  let(:state) { SecureRandom.uuid }
  before do
    sign_in user
  end

  describe "GET #index" do
    it "returns a success response" do
      get :index, params: {course_content_id: course_content.id}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    let(:lti_launch) { create(:lti_launch_model) }
    it "returns a success response" do
      allow(LtiLaunch).to receive(:current).and_return(lti_launch)
      allow(lti_launch).to receive(:activity_id).and_return('some_activity_id')
      allow(Xapi).to receive(:get_statements_by_query).and_return({response: {}})
      get(
        :show, 
        params: {
          course_content_id: course_content.id, 
          id: course_content_history.id, 
          student_id: user.id,
          state: lti_launch.state,
        },
        session: valid_session,
      )
      expect(response).to be_successful
    end
  end
end
